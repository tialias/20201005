{"name": "testcase description", "status": "broken", "statusDetails": {"message": "httprunner.exceptions.ValidationFailure: assert status_code equal 200(int)\t==> fail\ncheck_item: status_code\ncheck_value: 0(int)\nassert_method: equal\nexpect_value: 200(int)", "trace": "self = <testcases.text_field_test.text_banlist_test_test.TestCaseTextBanlistTest object at 0x10725f490>\nparam = {'assert_code': 200, 'assert_message': '', 'desc': '单行文本黑名单', 'form_data': {'field_1': '张三'}, ...}\n\n    @pytest.mark.parametrize(\n        \"param\",\n        Parameters(\n            {\n                \"desc-form_token-form_data-response_code_path-response_message_path-assert_code-assert_message\": \"${read_yaml(text_banlist_test)}\",\n            }\n        ),\n    )\n    def test_start(self, param):\n>       super().test_start(param)\n\ntestcases/text_field_test/text_banlist_test_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../python_env/hrenv/lib/python3.7/site-packages/httprunner/runner.py:456: in test_start\n    TestCase(config=self.__config, teststeps=self.__teststeps)\n../../python_env/hrenv/lib/python3.7/site-packages/httprunner/runner.py:357: in run_testcase\n    extract_mapping = self.__run_step(step)\n../../python_env/hrenv/lib/python3.7/site-packages/httprunner/runner.py:295: in __run_step\n    step_data = self.__run_step_request(step)\n../../python_env/hrenv/lib/python3.7/site-packages/httprunner/runner.py:209: in __run_step_request\n    validators, variables_mapping, self.__project_meta.functions\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <httprunner.response.ResponseObject object at 0x1072621d0>\nvalidators = [{'equal': ['$response_code_path', '$assert_code', '']}, {'equal': ['$response_message_path', '$assert_message', '']}]\nvariables_mapping = {'assert_code': 200, 'assert_message': '', 'desc': '单行文本黑名单', 'form_data': {'field_1': '张三'}, ...}\nfunctions_mapping = {'email_field_data': <function email_field_data at 0x1070ecef0>, 'gen_nodeId': <function gen_nodeId at 0x1070ec710>, '...on get_field_codetype at 0x1070ecb90>, 'get_httprunner_version': <function get_httprunner_version at 0x10710d050>, ...}\n\n    def validate(\n        self,\n        validators: Validators,\n        variables_mapping: VariablesMapping = None,\n        functions_mapping: FunctionsMapping = None,\n    ) -> NoReturn:\n    \n        variables_mapping = variables_mapping or {}\n        functions_mapping = functions_mapping or {}\n    \n        self.validation_results = {}\n        if not validators:\n            return\n    \n        validate_pass = True\n        failures = []\n    \n        for v in validators:\n    \n            if \"validate_extractor\" not in self.validation_results:\n                self.validation_results[\"validate_extractor\"] = []\n    \n            u_validator = uniform_validator(v)\n    \n            # check item\n            check_item = u_validator[\"check\"]\n            if \"$\" in check_item:\n                # check_item is variable or function\n                check_item = parse_data(\n                    check_item, variables_mapping, functions_mapping\n                )\n                check_item = parse_string_value(check_item)\n    \n            if check_item and isinstance(check_item, Text):\n                check_value = self._search_jmespath(check_item)\n            else:\n                # variable or function evaluation result is \"\" or not text\n                check_value = check_item\n    \n            # comparator\n            assert_method = u_validator[\"assert\"]\n            assert_func = get_mapping_function(assert_method, functions_mapping)\n    \n            # expect item\n            expect_item = u_validator[\"expect\"]\n            # parse expected value with config/teststep/extracted variables\n            expect_value = parse_data(expect_item, variables_mapping, functions_mapping)\n    \n            # message\n            message = u_validator[\"message\"]\n            # parse message with config/teststep/extracted variables\n            message = parse_data(message, variables_mapping, functions_mapping)\n    \n            validate_msg = f\"assert {check_item} {assert_method} {expect_value}({type(expect_value).__name__})\"\n    \n            validator_dict = {\n                \"comparator\": assert_method,\n                \"check\": check_item,\n                \"check_value\": check_value,\n                \"expect\": expect_item,\n                \"expect_value\": expect_value,\n                \"message\": message,\n            }\n    \n            try:\n                assert_func(check_value, expect_value, message)\n                validate_msg += \"\\t==> pass\"\n                logger.info(validate_msg)\n                validator_dict[\"check_result\"] = \"pass\"\n            except AssertionError as ex:\n                validate_pass = False\n                validator_dict[\"check_result\"] = \"fail\"\n                validate_msg += \"\\t==> fail\"\n                validate_msg += (\n                    f\"\\n\"\n                    f\"check_item: {check_item}\\n\"\n                    f\"check_value: {check_value}({type(check_value).__name__})\\n\"\n                    f\"assert_method: {assert_method}\\n\"\n                    f\"expect_value: {expect_value}({type(expect_value).__name__})\"\n                )\n                message = str(ex)\n                if message:\n                    validate_msg += f\"\\nmessage: {message}\"\n    \n                logger.error(validate_msg)\n                failures.append(validate_msg)\n    \n            self.validation_results[\"validate_extractor\"].append(validator_dict)\n    \n        if not validate_pass:\n            failures_string = \"\\n\".join([failure for failure in failures])\n>           raise ValidationFailure(failures_string)\nE           httprunner.exceptions.ValidationFailure: assert status_code equal 200(int)\t==> fail\nE           check_item: status_code\nE           check_value: 0(int)\nE           assert_method: equal\nE           expect_value: 200(int)\n\n../../python_env/hrenv/lib/python3.7/site-packages/httprunner/response.py:270: ValidationFailure"}, "description": "TestCase ID: ae79c182-9a1e-4942-a1fb-f2d2f84a81b3", "steps": [{"name": "step: 提交表单", "status": "broken", "statusDetails": {"message": "httprunner.exceptions.ValidationFailure: assert status_code equal 200(int)\t==> fail\ncheck_item: status_code\ncheck_value: 0(int)\nassert_method: equal\nexpect_value: 200(int)\n", "trace": "  File \"/Users/tianliangliang/python_env/hrenv/lib/python3.7/site-packages/httprunner/runner.py\", line 357, in run_testcase\n    extract_mapping = self.__run_step(step)\n  File \"/Users/tianliangliang/python_env/hrenv/lib/python3.7/site-packages/httprunner/runner.py\", line 295, in __run_step\n    step_data = self.__run_step_request(step)\n  File \"/Users/tianliangliang/python_env/hrenv/lib/python3.7/site-packages/httprunner/runner.py\", line 209, in __run_step_request\n    validators, variables_mapping, self.__project_meta.functions\n  File \"/Users/tianliangliang/python_env/hrenv/lib/python3.7/site-packages/httprunner/response.py\", line 270, in validate\n    raise ValidationFailure(failures_string)\n"}, "start": 1606299154834, "stop": 1606299154849}], "attachments": [{"name": "stderr", "source": "e8a6d0e3-801b-46e6-9904-a45c81beec92-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "param", "value": "{'desc': '单行文本黑名单', 'form_token': 'cBPZWA', 'form_data': {'field_1': '张三'}, 'response_code_path': 'status_code', 'response_message_path': '', 'assert_code': 200, 'assert_message': ''}"}], "start": 1606299154830, "stop": 1606299154850, "uuid": "6ec845e3-f361-4298-8f74-4069038b2500", "historyId": "33b63932bcd372357a3b456d175ff681", "testCaseId": "2dcb04c042856fa18bb7d29a0fa0782a", "fullName": "testcases.text_field_test.text_banlist_test_test.TestCaseTextBanlistTest#test_start", "labels": [{"name": "parentSuite", "value": "testcases.text_field_test"}, {"name": "suite", "value": "text_banlist_test_test"}, {"name": "subSuite", "value": "TestCaseTextBanlistTest"}, {"name": "host", "value": "tianliangdeMBP2.lan"}, {"name": "thread", "value": "61986-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.text_field_test.text_banlist_test_test"}]}